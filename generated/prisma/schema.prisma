model BlogArticle {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  title         String
  slug          String         @unique
  description   String
  content       String
  stage         ContentStage   @default(DRAFT)
  categoryId    String
  category      BlogCategory   @relation(fields: [categoryId], references: [id])
  comments      BlogComment[]
  BlogReaction  BlogReaction[]
  commentsCount Int            @default(0)
  reactionCount Int            @default(0)
}

// ----------------------------------------------------------------------

model BlogCategory {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  title       String
  slug        String        @unique
  description String
  BlogArticle BlogArticle[]
}

// ----------------------------------------------------------------------

model BlogComment {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  content   String
  articleId String
  article   BlogArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ----------------------------------------------------------------------

enum ReactionType {
  LIKE
  DISLIKE
}

model BlogReaction {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  articleId String
  article   BlogArticle  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      ReactionType
}

enum ContentStage {
  PUBLISHED
  DRAFT
}

model CustomerCompany {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  name      String
  stage     ContentStage @default(DRAFT)
}

// ----------------------------------------------------------------------

model CustomerReview {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  authorName     String
  authorPosition String
  authorCompany  String
  content        String
  stage          ContentStage @default(DRAFT)
}

model Employee {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  firstName String
  lastName  String
  position  String
  slug      String       @unique
  dob       DateTime
  userId    String?      @unique
  user      User?        @relation(fields: [userId], references: [id])
  stage     ContentStage @default(DRAFT)
  joinedAt  DateTime

  @@index([userId])
}

model Project {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  description String
  content     String
  stage       ContentStage @default(DRAFT)
}

generator client {
  provider        = "prisma-client-js"
  output          = "../../../generated/prisma"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  description String
  content     String
  stage       ContentStage @default(DRAFT)
}

enum AccessType {
  ADMIN
  USER
}

model User {
  id         String         @id @default(uuid())
  email      String         @unique
  password   String
  name       String
  accessType AccessType     @default(USER)
  roles      UserRole[]     @relation("UserRoles")
  employee   Employee?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  comments   BlogComment[]
  reactions  BlogReaction[]
}

// ----------------------------------------------------------------------

model UserRole {
  id          String               @id @default(uuid())
  name        String               @unique
  description String?
  permissions UserRolePermission[]
  users       User[]               @relation("UserRoles")
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

// ----------------------------------------------------------------------

enum PermissionName {
  USER
  EMPLOYEE
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  PUBLISH
  UNPUBLISH
}

model UserRolePermission {
  id        String             @id @default(uuid())
  name      PermissionName
  actions   PermissionAction[] @default([])
  roleId    String
  role      UserRole           @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@unique([roleId, name])
}
